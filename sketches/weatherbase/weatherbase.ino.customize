/* -------------------------------------------------------------------------------- 
 *  Weatherbase
 *  Harald Schlangmann, March 2021
 * -------------------------------------------------------------------------------- */

#include <Bolbro.h>
#include <BolbroWebServer.h>

#include <WeatherPacket.h>
#include <CalibrationPacket.h>
#include <HC12.h>

#include "History.h"
#include "DailyMinMax.h"
#include "Sun.h"

//  weather data

WeatherPacket weatherPacket;
time_t lastPacketUpdate = 0;

//  configuration data
CalibrationPacket calibrationPacket;

static void sendCalibration() {
  uint8_t *packetBinary = calibrationPacket.encodedBytes();
  int packetSize = calibrationPacket.encodedSize();
  
  if (DEBUG) {
    Serial.println("sending calibration...");
    calibrationPacket.printSerial();
  }
  
  HC12.write(packetBinary, packetSize);
}

//  aggregated / post processed values

History windHistory("wind", 10*60); // wind speed samples, avg is wind, max is gust; 10 minutes horizon
History rainHistory("rain", 60*60); // rain samples, range is rain in last hour
History barometricHistory("barometer", 30*60); // barometric pressure samples, using raising / falling

DailyMinMax temperatureMinMax("temperature"); // collect min and max temperatures of the day
DailyMinMax rainMinMax("rain"); // collect the in-day rain amount

static void updateAggregates() {
  if (weatherPacket.mTemperatureDegreeCelsius!=UNDEFINEDVALUE)
    temperatureMinMax.addSample(weatherPacket.mTemperatureDegreeCelsius);
  if (weatherPacket.mWindSpeedMpS!=UNDEFINEDVALUE)
    windHistory.addSample(weatherPacket.mWindSpeedMpS);
  if (weatherPacket.mAccumulatedRainMM!=UNDEFINEDVALUE)
    rainHistory.addSample(weatherPacket.mAccumulatedRainMM);
  if (weatherPacket.mAccumulatedRainMM!=UNDEFINEDVALUE)
    rainMinMax.addSample(weatherPacket.mAccumulatedRainMM);
  if (weatherPacket.mPressureHPA!=UNDEFINEDVALUE)
    barometricHistory.addSample(weatherPacket.mPressureHPA);
}

//  web server

class WeatherWebServer:public BolbroWebServer
{
  public:

    WeatherWebServer() : BolbroWebServer () {
    }

    void begin() {

      //  static content
      on("/", [this]() { loadFromSpiffs("/index.html"); });
      on("/administration.html", [this]() { CHECKLOCALACCESS loadFromSpiffs("/administration.html"); });
      on("/BolbroHaus.jpg", [this]() { loadFromSpiffs("/BolbroHaus.jpg"); });
      on("/battery.png", [this]() { loadFromSpiffs("/battery.png"); });
      on("/humidity.png", [this]() { loadFromSpiffs("/humidity.png"); });
      on("/pressure.png", [this]() { loadFromSpiffs("/pressure.png"); });
      on("/temperature.png", [this]() { loadFromSpiffs("/temperature.png"); });
      on("/wind.png", [this]() { loadFromSpiffs("/wind.png"); });
      on("/updated.png", [this]() { loadFromSpiffs("/updated.png"); });
      on("/sun.png", [this]() { loadFromSpiffs("/sun.png"); });
      on("/rain.png", [this]() { loadFromSpiffs("/rain.png"); });
      on("/inclination.png", [this]() { loadFromSpiffs("/inclination.png"); });
      on("/azimuth.png", [this]() { loadFromSpiffs("/azimuth.png"); });

      //  dynamic stuff
      on("/weatherdata.json", [this]() { handleWeatherData(); });
      on("/calibrationdata.json", [this]() { handleCalibrationData(); });
      on("/change-calibration", [this]() { CHECKLOCALACCESS changeCalibration(); });
      on("/revert-calibration", [this]() { CHECKLOCALACCESS revertCalibration(); });
    
      BolbroWebServer::begin();    
    }
    
  private:
  
    void handleWeatherData() {
      String json = "{\n";
    
      json += "\t\"weather\" : " + weatherPacket.json("\t") + ",\n";
    
      if (lastPacketUpdate) {
        //  set "German" representation
        char timeCStr[32];
        struct tm *t = localtime(&lastPacketUpdate);
        strftime (timeCStr, 31, "%d. %b %X", t);

        String updatedStr(*timeCStr=='0'?timeCStr+1:timeCStr);

        static struct {
          const char *shortMonth;
          const char *longMonth;
        }       months[] = {
          { "Jan", "Januar" },
          { "Feb", "Februar" },
          { "Mar", "M&auml;rz" },
          { "Apr", "April" },
          { "May", "Mai" },
          { "Jun", "Juni" },
          { "Jul", "Juli" },
          { "Aug", "August" },
          { "Sep", "September" },
          { "Oct", "Oktober" },
          { "Nov", "November" },
          { "Dec", "Dezember" }
        };

        for (int i = 0; i<12; i++)
          updatedStr.replace(months[i].shortMonth, months[i].longMonth);

        json += "\t\"updated-de\" : \"" + updatedStr + "\",\n";
        
        //  set default representation
        String timeStr(ctime(&lastPacketUpdate));
        timeStr.replace("  ", " ");
        timeStr.replace("\n", "");
        json += "\t\"updated\" : \"" + timeStr + "\",\n";
      } else {
        json += "\t\"updated-de\" : \"-\",\n";
        json += "\t\"updated\" : \"-\",\n";
      }

      json += "\t\"sun\" : {\n";

      if (calibrationPacket.mInclination == 30.0f && calibrationPacket.mAzimuth == 180.0f) {
        json += "\t\t\"inclination\" : \"-\",\n";
        json += "\t\t\"azimuth\" : \"-\"\n";        
      } else {      
        json += "\t\t\"inclination\" : " + String(calibrationPacket.mInclination, 1) +",\n";
        json += "\t\t\"azimuth\" : " + String(calibrationPacket.mAzimuth, 1) +"\n";
      }
      json += "\t},\n";
      
      json += "\t\"aggregated\" : {\n";

      if (temperatureMinMax.hasSamples()) {
        json += "\t\t\"mintemperature\" : " + String(temperatureMinMax.min(), 1) + ",\n";
        json += "\t\t\"maxtemperature\" : " + String(temperatureMinMax.max(), 1) + ",\n";
      } else {
        json += "\t\t\"mintemperature\" : \"-\",\n";
        json += "\t\t\"maxtemperature\" : \"-\",\n";        
      }

      if (windHistory.hasSamples()) {
        float windMpS = windHistory.avg();
        
        json += "\t\t\"windmps\" : " + String(windMpS, 1) + ",\n";
        json += "\t\t\"windknots\" : " + String(windMpS*1.94384, 1) + ",\n";
        json += "\t\t\"windbeaufort\" : " + String(round (pow (windMpS/0.836,2.0/3.0)), 0) + ",\n";

        float gustsMpS = windHistory.max();
        json += "\t\t\"gustsmps\" : " + String(gustsMpS) + ",\n";
        json += "\t\t\"gustsknots\" : " + String(gustsMpS*1.94384) + ",\n";
        json += "\t\t\"gustsbeaufort\" : " + String(round (pow (gustsMpS/0.836,2.0/3.0)), 0) + ",\n";        
      } else {
        json += "\t\t\"windmps\" : \"-\",\n";
        json += "\t\t\"windknots\" : \"-\",\n";
        json += "\t\t\"windbeaufort\" : \"-\",\n";
        json += "\t\t\"gustsmps\" : \"-\",\n";        
        json += "\t\t\"gustsknots\" : \"-\",\n";        
        json += "\t\t\"gustsbeaufort\" : \"-\",\n";        
      }

      if (barometricHistory.hasSamples())
        json += "\t\t\"barotrend\" : " + String(barometricHistory.change(), 1) + ",\n";        
      else
        json += "\t\t\"barotrend\" : \"-\",\n";

      if (rainMinMax.hasSamples())
        json += "\t\t\"rainday\" : " + String(rainMinMax.range()) + ",\n";        
      else
        json += "\t\t\"rainday\" : \"-\",\n";

      if (rainHistory.hasSamples())
        json += "\t\t\"rainhour\" : " + String(rainHistory.range()) + "\n";        
      else
        json += "\t\t\"rainhour\" : \"-\"\n";
      
      json += "\t}\n";
 
      json += "}\n";
    
      send(200, "application/json", json);
      LOG->println("file /weatherdata.json generated and sent");
    }

    void handleCalibrationData() {
      String json = calibrationPacket.json();
    
      send(200, "application/json", json);
      LOG->println("file /calibrationdata.json generated and sent");
    }

    void revertCalibration() {
      Serial.println(messageToString());
      bool hadErrors = false;
      bool hadPassword = false;
      for (uint8_t i = 0; i < args(); i++) {
        if (argName(i)=="password") {
          hadErrors = hadErrors||arg(i)!=ADMINPASSWORD;
          hadPassword = true;
          LOG->printf("password: %s, hadErrors: %s\n", arg(i).c_str(), hadErrors?"true":"false");
        } else
          hadErrors = true;
      }
      
      if (hadErrors||!hadPassword)
        send(404, "text/plain", "invalid arguments");
      else {
        calibrationPacket.revertToDefaults();
        send(200, "text/plain", "OK");
      }
    }
    
    void changeCalibration() {
     Serial.println(messageToString());
     bool hadErrors = false;
      bool hadPassword = false;
      for (uint8_t i = 0; i < args(); i++) {
        if (argName(i)=="password") {
          hadErrors = hadErrors||arg(i)!=ADMINPASSWORD;
          hadPassword = true;
          LOG->printf("password: %s, hadErrors: %s\n", arg(i).c_str(), hadErrors?"true":"false");
        } else if (argName(i)=="speedFactor") {
          float newValue = arg(i).toFloat();
          if (newValue==0)
            hadErrors = true;
          else
            calibrationPacket.mWindSpeedFactor = newValue;
          LOG->printf("speedFactor: %.1f, hadErrors: %s\n", newValue, hadErrors?"true":"false");
        } else if (argName(i)=="height") {
          float newValue = arg(i).toFloat();
          if (newValue==0)
            hadErrors = true;
          else
            calibrationPacket.mMeasurementHeight = newValue;
          LOG->printf("height: %.2f, hadErrors: %s\n", newValue, hadErrors?"true":"false");
        } else if (argName(i)=="reportSecs") {
          unsigned long newValue = arg(i).toInt();
          if (newValue==0)
            hadErrors = true;
          else
            calibrationPacket.mSecondsBetweenReports = newValue;
          LOG->printf("reportSecs: %ld, hadErrors: %s\n", newValue, hadErrors?"true":"false");
        } else if (argName(i)=="bucketVol") {
          float newValue = arg(i).toFloat();
          if (newValue==0)
            hadErrors = true;
          else
            calibrationPacket.mBucketTriggerVolume = newValue;
          LOG->printf("bucketVol: %.2f, hadErrors: %s\n", newValue, hadErrors?"true":"false");
        } else
          hadErrors = true;
      }     

      if (hadErrors||!hadPassword)
        send(404, "text/plain", "invalid arguments");
      else {
        calibrationPacket.save();
        send(200, "text/plain", "OK");
      }
    }
};

WeatherWebServer server;

//  other functions
static void propagateToOpenHAB() {
  //  propagate verified data to openHAB
  if (weatherPacket.mTemperatureDegreeCelsius!=UNDEFINEDVALUE)
    Bolbro.updateItem("ESP32_Weatherbase_Temperature", String(weatherPacket.mTemperatureDegreeCelsius, 1)+"°C");
  if (weatherPacket.mAccumulatedRainMM!=UNDEFINEDVALUE)
    Bolbro.updateItem("ESP32_Weatherbase_SumRain", String(weatherPacket.mAccumulatedRainMM, 1)+"mm");
  if (weatherPacket.mPressureHPA!=UNDEFINEDVALUE)
    Bolbro.updateItem("ESP32_Weatherbase_Pressure", String(weatherPacket.mPressureHPA, 0)+"hPa");
  if (weatherPacket.mHumidityPercent!=UNDEFINEDVALUE)
    Bolbro.updateItem("ESP32_Weatherbase_Humidity", String(weatherPacket.mHumidityPercent, 1)+"%");
  if (weatherPacket.mWindDirection[0]!='\0')
    Bolbro.updateItem("ESP32_Weatherbase_WindAngle", String(weatherPacket.mWindDirection));
  if (weatherPacket.mWindSpeedMpS!=UNDEFINEDVALUE)
    Bolbro.updateItem("ESP32_Weatherbase_RawWindStrength", String(weatherPacket.mWindSpeedMpS, 1)+"m/s");
  Bolbro.updateItem("ESP32_Weatherbase_BatteryLevel", String(weatherPacket.batteryPercentage(), 0)+"%");
  Bolbro.updateItem("ESP32_Weatherbase_BatteryVoltage", String(weatherPacket.mBatteryVoltage, 2)+"V");
  Bolbro.updateItem("ESP32_Weatherbase_LastUpdate", Bolbro.openHABTime(lastPacketUpdate));  
}

//  main functions

void setup() 
{
  //  configure Bolbro
  Bolbro.setSerialBaud(115200l);
  Bolbro.addWiFi(SSID,PW); // customize
 
  Bolbro.addWANGateway(WAN); // customize or remove

  Bolbro.setOpenHABHost("openhabian"); // customize or remove
  Bolbro.setSignalStrengthItem("ESP32_Weatherbase_SignalStrength"); // customize or remove
  Bolbro.setLastStartItem("ESP32_Weatherbase_LastStart"); // customize or remove

  Bolbro.setup("Weatherbase", DEBUG, USEREMOTEDEBUG);

  Serial.println("Weather setup...");

  Bolbro.connectToWiFi();

  Bolbro.configureTime();

  //  restore station calibration settings
  calibrationPacket.restore();

  Serial.printf("Base setup...\n");

  //  setup LoRa connection
  HC12.begin();

  //  configure signaling LEDs
  pinMode(LED_PIN, OUTPUT);

  //  setup web server
  server.begin();
  Serial.println("HTTP server started");
}

void loop() 
{
  static unsigned long lastMillisLEDTurnedOn = 0;
  static unsigned long lastMillisSunCalculated = 0;

  unsigned long currentMillis = millis();

  //  Handle requests to server
  server.handleClient();

  //  Handle input from station
  if (HC12.available()) {
    lastMillisLEDTurnedOn = currentMillis;
    digitalWrite(LED_PIN, HIGH); // high when data is received
    if (weatherPacket.decodeByte(HC12.read())) {
      weatherPacket.printSerial();
      lastPacketUpdate = time(NULL);

      //  station is up currently, "return" calibration / configuration parameters
      sendCalibration();

      //  derive aggregated values from raw values
      updateAggregates();

      //  we have a verified set of data here, send it to homeautomation
      propagateToOpenHAB();
    }
  }

  //  Maintain LED status, turn off after 2 seconds of inactivity
  //  and blink in case the LED is off for longer than 3*SECONDS_BETWEEN_REPORTS
  unsigned long secondsPassed = (currentMillis-lastMillisLEDTurnedOn)/MS2S_FACTOR;
  if (secondsPassed>3*calibrationPacket.mSecondsBetweenReports)
    //  blink mode
    digitalWrite(LED_PIN, secondsPassed%2?HIGH:LOW);
  else if (secondsPassed>2)
    digitalWrite(LED_PIN, LOW); // low once no activity detected

  //  Maintain sun position
  secondsPassed = (currentMillis-lastMillisSunCalculated)/MS2S_FACTOR;
  if (secondsPassed>60) { // update once a minute
    calcSun(&calibrationPacket.mAzimuth, &calibrationPacket.mInclination);
    lastMillisSunCalculated = currentMillis;
  }

  Bolbro.loop();
}
